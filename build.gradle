import org.junit.platform.gradle.plugin.JUnitPlatformPlugin
import org.jetbrains.kotlin.gradle.plugin.KotlinPlugin
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext.kotlin_version = '1.1.51'

    repositories {
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath group: 'org.junit.platform', name: 'junit-platform-gradle-plugin', version: '1.0.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

project.ext {
    groupName = 'io.lepo'
    pomConfig = {
        organisation {
            name 'Lepo.IO'
            url 'https://lepo.io/'
        }
        scm {
            url "https://github.com/Lepovirta/${rootProject.name}"
            connection "scm:git:https://github.com/Lepovirta/${rootProject.name}"
            developerConnection "scm:git:https://github.com/Lepovirta/${rootProject.name}"
        }
        licenses {
            license {
                name 'GNU Lesser General Public License'
                url 'http://www.gnu.org/licenses/lgpl-2.1.html'
                distribution 'repo'
            }
        }
        developers {
            developer {
                id 'jkpl'
                name 'Jaakko Pallari'
            }
        }
    }
}

apply plugin: 'gitversion'

allprojects {
    repositories {
        mavenCentral()
        jcenter()
    }
}

subprojects {
    project.version = project.gitVersion

    plugins.withType(JavaPlugin).whenPluginAdded {
        group project.groupName
        version project.version
        sourceCompatibility = 1.8
        archivesBaseName = "${rootProject.name}-${name}"

        repositories {
            maven { url 'https://jitpack.io' }
        }

        dependencies {
            compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
        }
    }

    plugins.withType(MavenPublishPlugin).whenPluginAdded {
        publishing {
            publications {
                maven(MavenPublication) {
                    groupId project.groupName
                    artifactId archivesBaseName
                    version project.version
                    from components.java
                    pom.withXml {
                        asNode().children().last() + project.pomConfig
                    }
                }
            }
        }
    }

    plugins.withType(JUnitPlatformPlugin).whenPluginAdded {
        junitPlatform {
            platformVersion '1.0.0'
            enableStandardTestTask = true
        }

        dependencies {
            testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0'
            testRuntime 'org.junit.jupiter:junit-jupiter-engine:5.0.0'
            testCompile 'org.assertj:assertj-core:3.8.0'
        }
    }

    plugins.withType(CheckstylePlugin).whenPluginAdded {
        checkstyle {
            configFile = file "${project.rootDir}/checkstyle.xml"
            toolVersion = '8.2'
        }
    }

    plugins.withType(JacocoPlugin).whenPluginAdded {
        jacocoTestReport {
            reports {
                xml.enabled false
                html.enabled false
                csv.enabled false
            }
        }

        def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

        jacoco {
            applyTo junitPlatformTestTask
        }

        project.task(type: JacocoReport, "junitPlatformJacocoReport",
                {
                    sourceDirectories = files("./src/main")
                    classDirectories = files("$buildDir/classes/main")
                    executionData junitPlatformTestTask
                }
        )
    }

    plugins.withType(KotlinPlugin).whenPluginAdded {
        dependencies {
            compile "org.jetbrains.kotlin:kotlin-stdlib-jre8"
        }

        sourceSets {
            main.java.srcDirs += 'src/main/kotlin'
            test.java.srcDirs += 'src/test/kotlin'
        }
    }

    tasks.withType(KotlinCompile).all {
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
}

project(':core') {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    dependencies {
        testCompile('org.junit.jupiter:junit-jupiter-api:5.0.0')
        testRuntime('org.junit.jupiter:junit-jupiter-engine:5.0.0')
    }
}

project(':examples') {
    apply plugin: 'java'
    apply plugin: 'application'
    apply plugin: 'checkstyle'

    mainClassName = 'io.lepo.lukki.cli.Main'

    dependencies {
        compile project(':core')
        compile project(':http')
        compile project(':html')
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
        compile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.25'
    }
}

project(':integration') {
    apply plugin: 'java'
    apply plugin: 'checkstyle'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'jacoco'

    dependencies {
        testCompile project(':core')
        testCompile project(':html')
        testCompile project(':http')
        testCompile project(':testserver')
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
        testCompile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.25'
    }
}

project(':html') {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    dependencies {
        compile project(':core')
        compile group: 'org.jsoup', name: 'jsoup', version: '1.10.3'
    }
}

project(':http') {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'

    dependencies {
        compile project(':core')
        compile group: 'org.apache.httpcomponents', name: 'httpasyncclient', version: '4.1.3'
    }
}

project(':testserver') {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'checkstyle'
    apply plugin: 'jacoco'
    apply plugin: 'kotlin'

    dependencies {
        compile 'io.javalin:javalin:0.5.2'
        testCompile group: 'org.jsoup', name: 'jsoup', version: '1.10.3'
        testCompile 'org.jodd:jodd-http:3.9.1'
        testCompile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
        testCompile group: 'org.slf4j', name: 'log4j-over-slf4j', version: '1.7.25'
    }
}

apply plugin: 'jacoco'

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include('**/build/jacoco/*.exec')

    subprojects.each {
        sourceSets(it.sourceSets.main)
    }

    onlyIf = {
        true
    }

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}
